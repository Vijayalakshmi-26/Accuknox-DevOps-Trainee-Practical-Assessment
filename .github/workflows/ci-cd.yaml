name: Wisecow CI/CD on EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-to-ec2:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: vijayalakshmi26/wisecow
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      # --- 1. Checkout repository ---
      - name: Checkout repository
        uses: actions/checkout@v3

      # --- 2. Set up Docker Buildx ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # --- 3. Docker login ---
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- 4. Build and push Docker image ---
      - name: Build & Push Docker Image
        run: |
          docker build -t $DOCKER_IMAGE:latest .
          docker push $DOCKER_IMAGE:latest

      # --- 5. Setup SSH key ---
      - name: Setup SSH key
        run: |
          echo "$SSH_KEY" > ec2_key.pem
          chmod 600 ec2_key.pem

      # --- 6. Copy manifests to EC2 ---
      - name: Copy Kubernetes manifests to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ec2_key.pem deployment.yaml service.yaml ingress.yaml issuer.yaml certificate.yaml $EC2_USER@$EC2_HOST:~/

      # --- 7. SSH into EC2 and deploy ---
      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            set -e

            # --- Install dependencies & Docker ---
            sudo apt-get update
            sudo apt-get install -y curl apt-transport-https ca-certificates gnupg lsb-release software-properties-common conntrack
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo systemctl enable --now docker
            docker --version

            # --- Install kubectl ---
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/

            # --- Install Minikube ---
            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
            chmod +x minikube-linux-amd64
            sudo mv minikube-linux-amd64 /usr/local/bin/minikube

            # --- Start Minikube and enable Ingress ---
            minikube start --driver=docker
            kubectl wait --for=condition=Ready node/minikube --timeout=5m
            minikube addons enable ingress

            # --- Pull Docker image from Docker Hub and load into Minikube ---
            docker pull vijayalakshmi26/wisecow:latest
            minikube image load vijayalakshmi26/wisecow:latest

            # --- Install Cert-Manager ---
            kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml
            kubectl wait --for=condition=Available deployment -n cert-manager --all --timeout=5m

            # --- Deploy Wisecow manifests ---
            kubectl apply -f deployment.yaml
            kubectl apply -f service.yaml
            kubectl apply -f ingress.yaml
            kubectl apply -f issuer.yaml
            kubectl apply -f certificate.yaml

            # --- Wait a bit for resources to be ready ---
            sleep 20

            # --- Debug: Check resources ---
            echo "=== Pods ==="
            kubectl get pods -A
            echo "=== Services ==="
            kubectl get svc -A
            echo "=== Ingress ==="
            kubectl get ingress -A
            echo "=== Certificates ==="
            kubectl get certificates -A
            echo "=== Certificate Requests ==="
            kubectl get certificaterequests -A

            # --- Test deployment ---
            INGRESS_IP=$(minikube ip)
            echo "Wisecow is deployed at IP: $INGRESS_IP"
            curl -k --resolve wisecow.local:443:$INGRESS_IP https://wisecow.local
          EOF

